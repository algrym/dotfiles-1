" vim: fdm=marker fmr={{{,}}} fdl=0
" Author Andreas Louv <andreas@louv.dk>
" This is my personal vim configuration.
" Use at own risk, NO WARRANTY, to the extent permitted by law.

" With great respect and thanks to: Tim Pope Steve Losh, Amir Salihefendic,
" Henrik Nyh, Martin Grenfell and many others for fantastic help and
" inspiration

" Basic options {{{

" Vundle {{{

set rtp+=~/.vim/bundle/Vundle.vim

call vundle#begin()

Plugin 'VundleVim/Vundle.vim'

" Theme
Plugin 'baskerville/bubblegum'

" Basics
Plugin 'scrooloose/syntastic'
Plugin 'tpope/vim-commentary'
Plugin 'tpope/vim-repeat'

Plugin 'tpope/vim-unimpaired'

" Auto complete on <tab>
Plugin 'ervandew/supertab'

" Easy access of undolist
Plugin 'sjl/gundo.vim'

" Auto insert quotes, ...
Plugin 'Raimondi/delimitMate'

" More and better text objects
Plugin 'wellle/targets.vim'

" Auto detect tabstop, shiftwidth, softtabstop and expandtab
Plugin 'tpope/vim-sleuth'

" Statusline
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'

" Language specific plugins
Plugin 'pangloss/vim-javascript'
Plugin 'andlrc/rpgle.vim'
Plugin 'PotatoesMaster/i3-vim-syntax'
Plugin 'elzr/vim-json'
Plugin 'mxw/vim-jsx'
Plugin 'digitaltoad/vim-pug'
Plugin 'mustache/vim-mustache-handlebars'
Plugin 'yko/mojo.vim'
Plugin 'vito-c/jq.vim'

call vundle#end()

" }}}

filetype plugin on

set encoding=utf-8
set modeline
set modelines=2
set autoindent
set showmode
set showcmd
set hidden
set visualbell
set ttyfast
set ruler
set backspace=indent,eol,start
set relativenumber
set laststatus=2
set history=1000
set undofile
set undoreload=10000
set list
set listchars=tab:¦\ ,eol:¬,extends:❯,precedes:❮
set lazyredraw
set matchtime=0
set showbreak=↪
set splitbelow
set splitright
set shiftround
set title
set linebreak
set colorcolumn=+1
set shell=/bin/sh
set path=**

" Spelling
"
set dictionary=/usr/share/dict/words
set spellfile=~/.vim/spell.utf-8.add

" Don't try to highlight lines longer than 800 characters.
set synmaxcol=800

" Time out on key codes but not mappings.
set notimeout
set ttimeout
set ttimeoutlen=10

" Make Vim able to edit crontab files again.
set backupskip=/tmp/*,/private/tmp/*"

" Better Completion
set complete=.,w,b,u,t
set completeopt=longest,menuone,preview

" Save when losing focus
au FocusLost * :silent! wall

" Resize splits when the window is resized
au VimResized * :wincmd =

" Leader
let mapleader = "\<Space>"
let maplocalleader = "\\"

" Cursorline {{{
" Only show cursorline in the current window and in normal mode.

augroup cline
  set cursorline
  au!
  au WinLeave,InsertEnter * set nocursorline
  au WinEnter,InsertLeave * set cursorline
augroup END

" }}}
" Trailing whitespace {{{
" Only shown when not in insert mode

augroup trailing
  au!
  au InsertEnter * :set listchars-=trail:⌴
  au InsertLeave * :set listchars+=trail:⌴
  set listchars+=trail:⌴
augroup END

" }}}
" Wildmenu completion {{{

set wildmenu
set wildmode=longest,full

set wildignore+=.hg,.git,.svn                    " Version control
set wildignore+=*.aux,*.out,*.toc                " LaTeX intermediate files
set wildignore+=*.jpg,*.bmp,*.gif,*.png,*.jpeg   " binary images
set wildignore+=*.o,*.obj,*.exe,*.dll            " compiled object files
set wildignore+=migrations                       " Django migrations
set wildignore+=*.pyc                            " Python byte code
set wildignore+=*.orig                           " Merge resolution files

" Clojure/Leiningen
set wildignore+=classes
set wildignore+=lib

" }}}
" Make sure Vim returns to the same line when you reopen a file. {{{
augroup line_return
  au!
  au BufReadPost *
    \ if line("'\"") > 0 && line("'\"") <= line("$") |
    \     execute 'normal! g`"zvzz' |
    \ endif
augroup END

" }}}
" Tabs, spaces, wrapping {{{

set tabstop=2
set shiftwidth=2
set softtabstop=2
set expandtab
set nowrap
set textwidth=80
set formatoptions=tcr1

" }}}
" Backups {{{

set noswapfile                    " Got 16GB of memory
set nowritebackup                 " We still have undo list after close/reopen,
                                  " and this is mangling the original creation
                                  " date of the target file.

set undodir=~/.vim/tmp/undo//     " undo files

" Make those folders automatically if they don't already exist.
if !isdirectory(expand(&undodir))
    call mkdir(expand(&undodir), "p")
endif

" }}}
" Color scheme {{{

set t_Co=256
syntax on
set background=dark
colorscheme bubblegum-256-dark

" }}}

" }}}
" Gvim cursor {{{

if has("gui_running")
  set guicursor=a:block-cursor
endif

" }}}
" Abbreviations {{{

iabbrev al@ andreas@louv.dk

" }}}
" Convenience mappings {{{

" Enable <C-z> in insert mode and keep selection in visual
inoremap <C-z> <esc><C-z>a
vnoremap <C-z> <esc><C-z>gv

" sort lines
vnoremap <leader>s :!sort<cr>

" Clean trailing whitespace
nnoremap <silent> <leader>ww mz:let z=@/<cr>:%s/\s\+$//<cr>:let @/=z<cr>`z

" Keep the cursor in place while joining lines
nnoremap J mzJ`z

" Split Line
nnoremap S :let z=@/<cr>i<cr><esc>^mzgk:silent! s/\v\s+$//<cr>:let @/=z<cr>`z

" zg will add <cword> to the custom spell file, sort that file after adding
nnoremap zg zg:silent ! sort ~/.vim/spell.utf-8.add -o
  \ ~/.vim/spell.utf-8.add<cr>:redraw!<cr>

" Sudo to write
cnoremap w!! w !sudo tee % >/dev/null

" Make {<cr> insert a pair of brackets in such a way that the cursor is correctly
" positioned inside of them AND the following code doesn't get unfolded.
inoremap {<cr> {}<left><cr><tab>.<cr><esc>kA<bs>

" Store relative line number jumps in the jumplist

" Toggle list & number {{{
"
" Toggle between relative and line numbers
nnoremap <leader>n :setlocal number!<bar>setlocal relativenumber!<cr>

" Toggle invisible characters
nnoremap <leader>i :set list!<cr>

" }}}
" Insert Mode Completion {{{

inoremap <c-f> <c-x><c-f>
inoremap <c-]> <c-x><c-]>
inoremap <c-l> <c-x><c-l>

" }}}

" }}}
" Quick editing {{{

nnoremap <leader>ev :split $MYVIMRC<cr>
nnoremap <leader>ez :split ~/.zshrc<cr>
nnoremap <leader>eg :split ~/.gitconfig<cr>
nnoremap <leader>es :split ~/.vim/spell.utf-8.add<cr>
nnoremap <leader>ei :split ~/.config/i3/config<cr>

" Edit file in same directory as current file:
" vimcasts.org/e/14
nnoremap <leader>ew :e <C-r>=expand("%:p:h")."/"<CR>

nnoremap <leader>sv :source $MYVIMRC<cr>

" }}}
" Searching and movement {{{

set ignorecase
set smartcase
set incsearch
set showmatch
set hlsearch

set scrolloff=5
set sidescroll=1
set sidescrolloff=10

set virtualedit+=block

noremap <silent> <C-l> :noh<cr>:call clearmatches()<cr>

runtime macros/matchit.vim
map <tab> %

" Since we map <tab> (<C-i>) we will need to remap <C-i> to get control of our
" jumplist again
nnoremap <C-p> <C-i>

" Don't move on *
" I'd use a function for this but Vim clobbers the last search when you're in
" a function so fuck it, practicality beats purity.
nnoremap <silent> * :let stay_star_view = winsaveview()<cr>*:call winrestview(stay_star_view)<cr>

" Keep search matches in the middle of the window.
nnoremap n :normal! nzzzv<cr>
nnoremap N :normal! Nzzzv<cr>

" Quick way to exit insert mode
inoremap jk <esc>

noremap j gj
noremap k gk
noremap gj j
noremap gk k

" Speed up scrolling of the viewport slightly
nnoremap <C-e> 2<C-e>
nnoremap <C-y> 2<C-y>

" Emacs like keys for command line {{{

cnoremap <C-b> <left>
cnoremap <C-f> <right>
cnoremap <C-a> <home>
cnoremap <C-e> <end>

" }}}
" Visual Mode {{{

function! s:VSetSearch()
  let temp = @@
  norm! gvy
  let @/ = '\V' . substitute(escape(@@, '\'), '\n', '\\n', 'g')
  let @@ = temp
endfunction

vnoremap * :<C-u>call <SID>VSetSearch()<CR>//<CR><c-o>
vnoremap # :<C-u>call <SID>VSetSearch()<CR>??<CR><c-o>

" }}}
"
" }}}
" Folding {{{

set foldlevelstart=10

set foldmethod=indent

" Automatic set foldmethod to manual when entering insert mode, this is done to
" prevent vim from unfolding automatic folds, when the code changes.

augroup LazyFolds

  au!
  au InsertEnter,WinLeave * :call <SID>LazyFolds(0)
  au InsertLeave,WinEnter * :call <SID>LazyFolds(1)

  function! s:LazyFolds(type)
    if a:type == 0
      let s:lazy_foldmethod=&foldmethod
      setlocal foldmethod=manual
    else
      execute 'setlocal foldmethod=' . s:lazy_foldmethod
    endif
  endfunction

augroup END

" Make zO recursively open whatever fold we're in, even if it's partially open.
nnoremap zO zczO

set fillchars+=fold:\ 

hi Folded term=standout ctermfg=9

function! MyFoldText() " {{{
  let s:left = substitute(getline(v:foldstart), '{{' . '{', '', 'g')
  let s:left = substitute(s:left, '\v\t', repeat(' ', &tabstop), 'g')
  let s:count = printf(' ' . &commentstring, printf('%2d lines', v:foldend - v:foldstart + 1))
  let s:width = &textwidth
  if s:width == 0
    let s:width = 80
  endif
  let s:left_max = s:width - len(s:count)
  let s:left = substitute(s:left, '\v(.{' . (s:left_max - 1) . '}).*', '\1…', '')
  let s:left = s:left . repeat(' ', s:left_max - len(s:left))

  return s:left . s:count
endfunction " }}}

set foldtext=MyFoldText()

" }}}
" Auto Commands {{{

" Disable blink on first + last line
augroup GuiVim

  au!
  au GUIEnter * set vb t_vb=

augroup END

" Make files starting with a shebang executable if they are not already. This
" could potential be dangerous.
augroup AutoChmodX

  au!
  au BufWritePost * call AutoCmdChmodX()

  function! AutoCmdChmodX()
    if getline(1) =~ '^#!'
      let filename = shellescape(@%, 1)
      if stridx(getfperm(@%), 'x') == -1
        call system('chmod +x -- '. filename)
      endif
    endif
  endfunction

augroup END

" Set new files ft to __new__ so that a ftplugin can be ran, this is a nice way
" to enable maps for new files only
augroup NewFT

  au!
  au BufNewFile * setlocal ft=__new__

augroup END

" }}}
" Plugin settings {{{

" AirLine {{{

let g:airline_theme = 'base16'

" Enable the list of buffers
let g:airline#extensions#tabline#enabled = 1

" Show just the filename
let g:airline#extensions#tabline#fnamemod = ':t'

" }}}
" Commentary {{{

augroup plugin_commentary
  au!
  au FileType sh,perl,ruby,python setlocal commentstring=#\ %s
  au FileType c,javascript,rpgle setlocal commentstring=//\ %s
  au FileType vim setlocal commentstring=\"\ %s
  au FileType lisp,scheme setlocal commentstring=;\ %s
augroup END

" }}}
" DelimitMate {{{

let delimitMate_excluded_ft = "lisp"

" }}}
" Gundo {{{

nnoremap <F9> :GundoToggle<CR>

" }}}
" Supertab {{{

let g:SuperTabDefaultCompletionType = "<c-n>"
let g:SuperTabLongestHighlight = 1
let g:SuperTabCrMapping = 1

"}}}
" Syntastic {{{

let g:syntastic_javascript_checkers=['jscs']
let g:syntastic_perl_checkers=['perlcritic']
let g:syntastic_scss_checkers=['scss_lint']
let g:syntastic_enable_signs = 1
let g:syntastic_check_on_open = 0
let g:syntastic_check_on_wq = 0
let g:syntastic_auto_jump = 0
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_mode_map = {
            \ "mode": "active",
            \ "active_filetypes": [],
            \ "passive_filetypes": ['html', 'rst']
            \ }
let g:syntastic_stl_format = '[%E{%e Errors}%B{, }%W{%w Warnings}]'

nnoremap <leader>C :SyntasticCheck<cr>

" }}}

" }}}
