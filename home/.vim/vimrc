" vim: fdm=marker fmr={{{,}}} fdl=0
" Author Andreas Louv <andreas@louv.dk>
" This is my personal vim configuration.
" Use at own risk, NO WARRANTY, to the extent permitted by law.

" Basic options {{{

" Vundle {{{

set rtp+=~/.vim/bundle/Vundle.vim

call vundle#begin()

Plugin 'VundleVim/Vundle.vim'

" Theme
Plugin 'romainl/Apprentice'

" Basics
Plugin 'tpope/vim-commentary'
Plugin 'tpope/vim-repeat'
Plugin 'tpope/vim-unimpaired'
Plugin 'tpope/vim-surround'
Plugin 'wellle/targets.vim'

" <tab> completion
Plugin 'lifepillar/vim-mucomplete'

" Align text with on regular expression
Plugin 'godlygeek/tabular'

" Readline Style keybinds
Plugin 'tpope/vim-rsi'

" Easy access of undolist
Plugin 'mbbill/undotree'

" Language specific plugins
Plugin 'pangloss/vim-javascript'
Plugin 'andlrc/rpgle.vim'
Plugin 'elzr/vim-json'

call vundle#end()

" }}}

filetype plugin indent on

set encoding=utf-8
set modeline modelines=2
set showmode
set showcmd
set hidden
set visualbell
set ttyfast
set backspace=indent,eol,start
set laststatus=2
set history=1000
set undofile
set undoreload=10000
set list
set listchars=tab:¦\ ,eol:¬,extends:❯,precedes:❮
set lazyredraw
set matchtime=0
set showbreak=↪
set shiftround
set title
set colorcolumn=+1
set shell=/bin/sh
set path=**
set nrformats-=octal
set scrolloff=1 sidescrolloff=5
set autoindent
set virtualedit+=block

" Spelling {{{
"
set dictionary=/usr/share/dict/words
set spellfile=~/.vim/spell.utf-8.add

" }}}
" Statusline {{{

set statusline=%r%t\ %m%y\ \#%n%=%02v:%l/%L

" }}}
" Don't try to highlight lines longer than 200 characters.
set synmaxcol=200
" Time out on key codes but not mappings. {{{

set notimeout
set ttimeout
set ttimeoutlen=10

" }}}
" Resize splits when the window is resized
au VimResized * :wincmd =
" Leader {{{

let mapleader = "\<Space>"
let maplocalleader = "\\"

" }}}
" Trailing whitespace {{{

" Clean trailing whitespace
nnoremap <silent> <leader>ww mz:keepp %s/\\\@<!\s\+$//e<cr>`z

" Only shown when not in insert mode
augroup trailing
  au!
  au InsertEnter * :set listchars-=trail:⌴
  au InsertLeave * :set listchars+=trail:⌴
  set listchars+=trail:⌴
augroup END

" }}}
" Wildmenu completion {{{

set wildmenu
set wildmode=longest,full
set wildignorecase

set wildignore+=.hg,.git,.svn                    " Version control
set wildignore+=*.aux,*.out,*.toc                " LaTeX intermediate files
set wildignore+=*.jpg,*.bmp,*.gif,*.png,*.jpeg   " binary images
set wildignore+=*.o,*.obj,*.exe,*.dll            " compiled object files
set wildignore+=migrations                       " Django migrations
set wildignore+=*.pyc                            " Python byte code
set wildignore+=*.orig                           " Merge resolution files

" Clojure/Leiningen
set wildignore+=classes
set wildignore+=lib

" }}}
" Wrapping {{{

set nowrap
set textwidth=80
set formatoptions+=j
set formatoptions-=t

" }}}
" Backups {{{

set noswapfile                    " Got 16GB of memory
set nowritebackup                 " We still have undo list after close/reopen,
                                  " and this is mangling the original creation
                                  " date of the target file.

set undodir=~/.vim/tmp/undo//     " undo files

" Make those folders automatically if they don't already exist.
if !isdirectory(expand(&undodir))
    call mkdir(expand(&undodir), "p")
endif

" }}}
" Color scheme {{{

set t_Co=256
syntax on
set background=dark
colorscheme apprentice

" }}}

" }}}
" Gvim cursor {{{

if has("gui_running")
  set guicursor=a:block-cursor
  set guioptions=
  set mouse=
endif

" }}}
" Abbreviations {{{

iabbrev <al@ <andreas@louv.dk
iabbrev al@ andreas@louv.dk

" }}}
" Convenience mappings {{{

noremap <silent> <C-l> :noh<cr>:call clearmatches()<cr>

" zg will add <cword> to the custom spell file, sort that file after adding
nnoremap zg zg:silent ! sort ~/.vim/spell.utf-8.add -o
  \ ~/.vim/spell.utf-8.add<cr>:redraw!<cr>

nnoremap <leader>m :make<cr>
nnoremap <leader>l :lmake<cr>
nnoremap <leader>h :help<space>

" Toggle first boolean after cursor
nnoremap <leader>tt V:!perl -pe 's/true/false/ <bar><bar> s/false/true/'<CR>

" Sudo to write
cnoreabbr w!! w !sudo tee % >/dev/null

" Make Y work like C and D
nnoremap Y y$

" }}}
" Commands {{{

" WIP

" }}}
" Quick editing {{{

nnoremap <leader>ev :split $MYVIMRC<cr>
nnoremap <leader>et :split ~/.config/termite/config<cr>
nnoremap <leader>ez :split ~/.zshrc<cr>
nnoremap <leader>eg :split ~/.gitconfig<cr>
nnoremap <leader>es :split ~/.vim/spell.utf-8.add<cr>
nnoremap <leader>ei :split ~/.config/i3/config<cr>

nnoremap <leader>sv :source $MYVIMRC<cr>

" }}}
" Searching and Navigating Files {{{

" Enhanched %
runtime macros/matchit.vim

set ignorecase smartcase hlsearch
set tags=./tags,tags
set grepprg=grep\ -n\ --exclude='*.tags'\ --exclude=tags\ --exclude-dir=.git\ -R\ '$*'

" Easy search and jump to match {{{

nnoremap <leader>g :g//#<left><left>
cnoremap <expr> <CR> getcmdline() =~# '^[vg]/.*/#$' ? '<CR>:' : '<CR>'

" }}}

nnoremap <leader>f :find<space>
nnoremap <leader>G :grep<space>

" List all buffers in command mode
nnoremap gb :ls<cr>:b<space>

" Store relative movement in the jumplist {{{

nnoremap <expr> j (v:count ? "m'" . v:count : '') . 'j'
nnoremap <expr> k (v:count ? "m'" . v:count : '') . 'k'

" }}}
" Edit and search word under cursor {{{

nnoremap c* *``cgn
nnoremap c# #``cgN
nnoremap cg* g*``cgn
nnoremap cg# g#``cgN

" }}}
" Faster define and include {{{

nnoremap [I [I:ijump  <C-r><C-w><S-left><left>
nnoremap ]I ]I:ijump  <C-r><C-w><S-left><left>

nnoremap [D [D:djump  <C-r><C-w><S-left><left>
nnoremap ]D ]D:djump  <C-r><C-w><S-left><left>

" }}}
" Edit file in same directory as current file {{{

nnoremap <leader>ew :e %:p:h/
nnoremap <leader>sw :split %:h/

" }}}

" }}}
" Folding {{{

set foldlevelstart=10

" Automatic set foldmethod to manual when entering insert mode, this is done to
" prevent vim from unfolding automatic folds, when the code changes.
augroup LazyFolds

  au!
  au InsertEnter,WinLeave * :call <SID>LazyFolds(0)
  au InsertLeave,WinEnter * :call <SID>LazyFolds(1)

  function! s:LazyFolds(type)
    if a:type == 0
      let b:lazy_foldmethod=&foldmethod
      setlocal foldmethod=manual
    elseif exists('b:lazy_foldmethod')
      execute 'setlocal foldmethod=' . b:lazy_foldmethod
    endif
  endfunction

augroup END

" Make zO recursively open whatever fold we're in, even if it's partially open.
nnoremap zO zczO

set fillchars+=fold:\ 

" Nicer colored 'foldtext'
hi Folded term=standout ctermfg=100 ctermbg=235

" Nicer 'foldtext' {{{

function! MyFoldText(foldstart, foldend) " {{{
  let line = getline(a:foldstart)
  let fold_count = a:foldend - a:foldstart + 1

  " Remove fold marker
  let fold = substitute(line, '\%(" \)\={\{3\}', '', 'g')
  " Convert leading tabs to spaces
  let fold = substitute(fold, '\%(^\t*\)\@<=\t', repeat(' ', &tabstop), 'g')

  let tw = &textwidth > 0 ? &textwidth : 80

  " Add '// N lines' to the right side of the line.
  let rhs = printf(' ' . &cms, printf('%2d lines', fold_count))

  let fold_width = tw - len(rhs)

  " Make sure the folded line doesn't excises textwidth.
  let fold = substitute(fold, '.\{' . (fold_width - 1) . '\}\zs.*', '\1…', '')

  " Insert spaces, and append rhs
  let fold = fold . repeat(' ', fold_width - len(fold)) . rhs

  return fold
endfunction " }}}

set foldtext=MyFoldText(v:foldstart,\ v:foldend)

" }}}

" }}}
" FileType Detect {{{

augroup FT_Detect

  au!
  au BufNewFile,BufRead *.cvim setlocal filetype=markdown.cvim
  au BufNewFile,BufRead *.widget setlocal filetype=javascript.widget
  au BufNewFile,BufRead *.cvim setlocal filetype=markdown.cvim
  au BufNewFile,BufRead *.widget setlocal filetype=javascript.widget
  au BufNewFile,BufRead *.xjson,*.xpd,*.ns,*.dmd,*.lib setlocal filetype=json
  au BufNewFile,BufRead *.cvim setlocal filetype=markdown.cvim
  au BufNewFile,BufRead *.widget setlocal filetype=javascript.widget
  au BufNewFile,BufRead *.xjson,*.xpd,*.ns,*.dmd,*.lib setlocal filetype=json
  au BufNewFile,BufRead *.md,*.m*down setlocal filetype=markdown
  au BufNewFile,BufRead *.tpl setlocal filetype=html.mustache syntax=html.mustache
  au BufNewFile,BufRead *.aspx,*.asmx,*.rpgleinc setlocal filetype=rpgle
  au BufNewFile,BufRead .xinitrc setlocal filetype=sh syntax=sh
  au BufNewFile,BufRead *.log400 setlocal filetype=log400 syntax=log400

augroup END

" }}}
" Auto Commands {{{

" Disable blink on first + last line
augroup GuiVim

  au!
  au GUIEnter * set vb t_vb=

augroup END

" Make files starting with a shebang executable if they are not already. This
" could potential be dangerous.
augroup AutoChmodX

  au!
  au BufWritePost * call AutoCmdChmodX()

  function! AutoCmdChmodX()
    if getline(1) =~ '^#!'
      let filename = shellescape(@%, 1)
      if stridx(getfperm(@%), 'x') == -1
        call system('chmod +x -- '. filename)
      endif
    endif
  endfunction

augroup END

" }}}
" Plugin settings {{{

" Commentary {{{

augroup plugin_commentary
  au!
  au FileType sh,perl,ruby,python setlocal commentstring=#\ %s
  au FileType c,javascript,rpgle setlocal commentstring=//\ %s
  au FileType vim setlocal commentstring=\"\ %s
  au FileType lisp,scheme setlocal commentstring=;\ %s
augroup END

" }}}
" UndotreeToggle {{{

let g:undotree_SetFocusWhenToggle = 1
nnoremap <F9> :UndotreeToggle<CR>

function! g:Undotree_CustomMap()
  map <buffer> <c-n> J
  map <buffer> <c-p> K
endfunction


" }}}
" MuComplete {{{

set completeopt+=menu,menuone

" }}}

" }}}
